Source: haskell-anydbm
Priority: optional
Maintainer: John Goerzen <jgoerzen@complete.org>
Build-Depends: debhelper (>= 4.0.0), ghc6 (>= 6.8.2), ghc6 (<< 6.8.2-999), haskell-devscripts (>= 0.5.6), cpphs, libghc6-mtl-dev, libghc6-missingh-dev (>= 1.0.3.1)
Build-Depends-Indep: debhelper (>= 4.0.0), haddock, haskell-devscripts (>= 0.5.6), ghc6 (>= 6.6), cpphs
Standards-Version: 3.6.2
Section: devel

Package: libghc6-anydbm-dev
Section: devel
Architecture: any
Depends: ${haskell:Depends}, libghc6-mtl-dev, libghc6-missingh-dev (>= 1.0.1)
Suggests: anydbm-doc
Description: Generic DBM-type interface for Haskell, GHC package
 This module provides a generic infrastructure for supporting storage
 of hash-like items with String-to-String mappings.  It can be used
 for in-memory or on-disk storage.
 .
 Two simple backend drivers are included with this package: one
 that is RAM-only, and one that is persistent and disk-backed.
 The hdbc-anydbm package provides another driver, which lets you use
 simple tables in any SQL database to provide a DBM-like interface.
 MissingPy also provides a Python driver which lets you use any
 Python anydbm driver under Haskell AnyDBM.

Package: anydbm-doc
Section: doc
Architecture: all
Description: Generic DBM-type interface for Haskell, Documentation
 This module provides a generic infrastructure for supporting storage
 of hash-like items with String-to-String mappings.  It can be used
 for in-memory or on-disk storage.
 .
 Two simple backend drivers are included with this package: one
 that is RAM-only, and one that is persistent and disk-backed.
 The hdbc-anydbm package provides another driver, which lets you use
 simple tables in any SQL database to provide a DBM-like interface.
 MissingPy also provides a Python driver which lets you use any
 Python anydbm driver under Haskell AnyDBM.

